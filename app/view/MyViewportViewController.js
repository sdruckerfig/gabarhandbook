/*
 * File: app/view/MyViewportViewController.js
 *
 * This file was generated by Sencha Architect version 4.1.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.2.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.2.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.MyViewportViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.myviewport',

    getAllChildNodes: function(node) {
        var me = this;
        var allNodes = new Array();
        if (node == null) {
            return [];
        }

        if(!node.hasChildNodes()){
            return node;
        }else{
            allNodes.push(node);
            node.eachChild(function(Mynode){allNodes = allNodes.concat(me.getAllChildNodes(Mynode));});
        }
        return allNodes;
    },

    highlightTerms: function() {
        var searchValue= this.getViewModel().get('searchText');
        if (!Ext.isEmpty(searchValue)) {
        var matchCls = 'x-livesearch-match';
        var regExpProtect = /\\|\/|\+|\\|\.|\[|\]|\{|\}|\?|\$|\*|\^|\|/gm;
        var tagsRe= /<[^>]*>/gm;
        var tagsProtect= '\x0f';

        var searchRegExp = new RegExp(searchValue, 'gi');
        var indexes = [];
        var count = 0;
        var currentIndex = 0;
        var cell = this.lookup('contentPnl').getEl().down('.x-autocontainer-innerCt');


        var matches = cell.dom.innerHTML.match(tagsRe);
        var cellHTML = cell.dom.innerHTML.replace(tagsRe,tagsProtect);

        // populate indexes array, set currentIndex, and replace wrap matched string in a span
        cellHTML = cellHTML.replace(searchRegExp, function(m) {
            count += 1;
            /*
            if (Ext.Array.indexOf(indexes, idx) === -1) {
                indexes.push(idx);
            }
            if (currentIndex === null) {
                currentIndex = idx;
            }
            */
            return '<span class="' + matchCls + '">' + m + '</span>';
        });
        // restore protected tags
        Ext.each(matches, function(match) {
            cellHTML = cellHTML.replace(tagsProtect, match);
        });
        // update cell html
        cell.dom.innerHTML = cellHTML;

        }


    },

    onExpandAll: function(owner, tool, event) {
        var store = this.getStore('TableOfContents');
        store.getRootNode().expandChildren(true);
    },

    onCollapseAll: function(owner, tool, event) {
        var store = this.getStore('TableOfContents');
        store.getRootNode().collapseChildren(true);

    },

    onTreepanelCheckChange: function(node, checked, e, eOpts) {
        var tree = this.lookup('mytree');
        var nodes = tree.getChecked();
        var data = [];

        for (var i=0; i<nodes.length; i++) {

            var children = this.getAllChildNodes(nodes[i]);

            if (!Ext.isArray(children)) {
                children = [children];
            }

            for (var j=0; j<children.length; j++) {
                var found = false;
                for (var k=0; k<data.length; k++) {
                    if (data[k].id == children[j].id) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    data.push({
                        title: children[j].get('text'),
                        content: children[j].get('content'),
                        depth: children[j].get('depth'),
                        id: children[j].id
                    });
                }
            }
            tree.setData(data);

        }
        this.lookup('contentPnl').setData(data);
        this.highlightTerms();
    },

    onTreepanelSelect: function(rowmodel, record, index, eOpts) {
        var tree = this.lookup('mytree');
        var checkedNodes = tree.getChecked();
        if (checkedNodes.length == 0) {
            var nodes = this.getAllChildNodes(record);
            if (Ext.isArray(nodes)) {

                var data = [];
                for (var i=0; i<nodes.length; i++) {
                    data.push({
                        title: nodes[i].get('text'),
                        content: nodes[i].get('content'),
                        depth: nodes[i].get('depth')
                    });
                }
                this.lookup('contentPnl').setData(data);

            } else {
                this.lookup('contentPnl').setData([{
                    title: record.get('text'),
                    content: record.get('content'),
                    depth: record.get('depth')
                }]);
            }
            this.highlightTerms();
        }
    },

    onSearchFieldChange: function(field, newValue, oldValue, eOpts) {

        var store = this.getStore('TableOfContents');
        store.clearFilter();
        if (!Ext.isEmpty(newValue)) {
            var regExp = new RegExp(newValue,'gi');
            store.filterBy(function(rec) {
                var content =  rec.get('text') + ' ' + rec.get('content');
                if (regExp.exec(content)) {
                    return true;
                } else {
                    return false;
                }
            });
        }

        var data =  this.lookup('contentPnl').getData(data);
        this.lookup('contentPnl').setData(data);
        this.highlightTerms();
    }

});
