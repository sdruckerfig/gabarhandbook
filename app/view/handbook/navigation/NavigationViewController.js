/*
 * File: app/view/handbook/navigation/NavigationViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.2.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.2.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.handbook.navigation.NavigationViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.handbooktreenav',

    onContentEdited: function(rec) {

    },

    onSearchFieldChange: function(field, newValue, oldValue, eOpts) {

        // this.getView().fireEvent('textsearchchange',this.getView(),newValue,field);


    },

    onTextfieldSpecialkey: function(field, e, eOpts) {

        if (e.getKey() == e.ENTER) {
            this.onSearch();
        }

    },

    onSearch: function(button, e) {
        var searchfield = this.lookup('searchfield');
        this.getView().fireEvent('textsearchchange',this.getView(),searchfield.getValue(),searchfield);
    },

    onClearSearch: function(button, e) {
        this.lookup('searchfield').setValue('');
        this.onSearch();
    },

    onExpandAll: function(owner, tool, event) {
        var store = this.getView().getStore();
        store.getRootNode().expandChildren(true);
    },

    onCollapseAll: function(owner, tool, event) {
        var store = this.getView().getStore();
        store.getRootNode().collapseChildren(true);

    },

    onTreepanelCheckChange: function(node, checked, e, eOpts) {
        var tree = this.getView();
        var nodes = tree.getChecked();

        this.getView().fireEvent('onmultiselectchange',this.getView(),nodes);
    },

    onTreepanelSelect: function(rowmodel, record, index, eOpts) {
        this.redirectTo('handbook/' + record.get('id'));
    },

    onTreepanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        /*
        var vm = this.getViewModel();
        if (vm.get('isEditor')) {
        Ext.widget('contenteditor', {
        scope: this,
        callback: this.onContentEdited,
        contentId: record.get('id')
        });
        }
        */
    },

    onMaximize: function(owner, tool, event) {
        var maximized = this.getViewModel().get('isMaximized');
        if (!maximized) {
            var v = Ext.ComponentQuery.query('maincontainer')[0];
            Ext.create('Ext.Viewport', {
                //  autoDestroy: false,
                layout: 'fit',
                items: [
                v
                ]
            });
            this.getViewModel().set('isMaximized',true);
        } else {

            var v = Ext.ComponentQuery.query('maincontainer')[0];
            Ext.ComponentQuery.query('viewport')[0].destroy();
            //  this.getViewModel().set('isMaximized',false);
            Ext.widget('maincontainer',{
                renderTo: 'handbook',
                listeners: {
                    afterrender: function(v) {

                        v.getController().redirectTo(location.hash.substring(1),{force: true});

                        Ext.get('handbook').on('resize', function(obj,e) {
                            v.setWidth(e.width);
                        },this,{buffer: 250});
                        }
                    }
                });
                // fixes bug in Ext JS when destroying viewport
                Ext.getBody().applyStyles({
                    overflow: 'auto'
                });


            }
    }

});
