/*
 * File: app/view/MyViewport.js
 *
 * This file was generated by Sencha Architect version 4.1.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.2.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.2.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.MyViewport', {
    extend: 'Ext.container.Viewport',
    alias: 'widget.myviewport',

    requires: [
        'MyApp.view.MyViewportViewModel',
        'MyApp.view.MyViewportViewController',
        'Ext.tree.Panel',
        'Ext.tree.View',
        'Ext.panel.Tool',
        'Ext.XTemplate',
        'Ext.toolbar.Toolbar',
        'Ext.toolbar.TextItem',
        'Ext.toolbar.Fill',
        'Ext.form.field.ComboBox',
        'Ext.button.Button'
    ],

    controller: 'myviewport',
    viewModel: {
        type: 'myviewport'
    },
    border: 1,
    height: 250,
    html: '<',
    width: 400,
    layout: 'border',

    items: [
        {
            xtype: 'treepanel',
            region: 'center',
            split: true,
            reference: 'mytree',
            flex: 2,
            collapsible: false,
            title: 'Table of Contents',
            rootVisible: false,
            bind: {
                selection: '{selectedNode}',
                store: '{TableOfContents}'
            },
            tools: [
                {
                    xtype: 'tool',
                    callback: 'onExpandAll',
                    tooltip: 'Expand All',
                    type: 'expand'
                },
                {
                    xtype: 'tool',
                    callback: 'onCollapseAll',
                    tooltip: 'Collapse All',
                    type: 'collapse'
                },
                {
                    xtype: 'tool',
                    tooltip: 'Help',
                    type: 'help'
                }
            ],
            listeners: {
                checkchange: 'onTreepanelCheckChange',
                select: 'onTreepanelSelect'
            }
        },
        {
            xtype: 'panel',
            region: 'east',
            split: true,
            reference: 'contentPnl',
            flex: 3,
            scrollable: true,
            tpl: [
                '<tpl for=".">',
                '    <h{depth}>{title}</h{depth}>',
                '    {content}',
                '</tpl>'
            ],
            width: 150,
            bodyPadding: 10,
            collapsible: true,
            title: 'Content',
            tools: [
                {
                    xtype: 'tool',
                    callback: function(owner, tool, event) {
                        owner.print();
                    },
                    type: 'print'
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    cls: 'warning',
                    dock: 'top',
                    bind: {
                        hidden: '{!versionsAvailable}'
                    },
                    items: [
                        {
                            xtype: 'tbtext',
                            html: 'Multiple Versions Available'
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'combobox',
                            width: 200,
                            emptyText: 'Select Version',
                            forceSelection: true,
                            queryMode: 'local',
                            valueField: 'id',
                            bind: {
                                store: '{ContentVersions}'
                            },
                            listeners: {
                                select: 'changeVersion'
                            }
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'panel',
            region: 'north',
            height: 89,
            margin: 0,
            bodyCls: 'sbgbackground',
            bodyPadding: 5,
            header: false,
            title: 'My Panel',
            layout: {
                type: 'hbox',
                align: 'middle'
            },
            items: [
                {
                    xtype: 'component',
                    flex: 2,
                    html: '<div style="font-weight: bold; font-size: 22px; color: white;">Bar Rules Handbook</div>'
                },
                {
                    xtype: 'textfield',
                    flex: 1,
                    cls: 'searchfield',
                    style: {
                        'border-radius': '5px'
                    },
                    fieldLabel: '',
                    labelAlign: 'top',
                    emptyText: 'Search',
                    bind: {
                        value: '{searchText}'
                    },
                    listeners: {
                        change: {
                            fn: 'onSearchFieldChange',
                            buffer: 250
                        }
                    }
                }
            ]
        },
        {
            xtype: 'panel',
            region: 'south',
            cls: 'topborder',
            height: 50,
            bodyBorder: false,
            header: false,
            title: 'My Panel',
            layout: {
                type: 'hbox',
                align: 'middle',
                pack: 'center'
            },
            items: [
                {
                    xtype: 'button',
                    handler: 'onPrevTopic',
                    margin: '0 5 0 0',
                    width: 150,
                    text: '<< Previous'
                },
                {
                    xtype: 'button',
                    handler: 'onNextTopic',
                    width: 150,
                    text: 'Next >>'
                }
            ]
        }
    ],
    listeners: {
        afterrender: {
            fn: 'onViewportAfterRender',
            delay: 500
        }
    }

});